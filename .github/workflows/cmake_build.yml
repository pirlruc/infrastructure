name: CMake Build

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: 
    - main
    - feature-windows
  pull_request:
    branches: 
    - main

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # - {
        #     name: "ubuntu-latest-gcc-boost-on",
        #     os: ubuntu-latest,
        #     build_type: "Release",
        #     cc: "gcc-11",
        #     cxx: "g++-11",
        #     boost: "ON",
        #     coverage: "OFF"
        #   }
        # - {
        #     name: "ubuntu-latest-gcc-boost-off",
        #     os: ubuntu-latest,
        #     build_type: "Release",
        #     cc: "gcc-11",
        #     cxx: "g++-11",
        #     boost: "OFF",
        #     coverage: "OFF"
        #   }
        # - {
        #     name: "ubuntu-latest-clang-boost-on",
        #     os: ubuntu-latest,
        #     build_type: "Release",
        #     cc: "clang-14",
        #     cxx: "clang++-14",
        #     boost: "ON",
        #     coverage: "OFF"
        #   }
        - {
            name: "ubuntu-latest-clang-boost-off",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang-14",
            cxx: "clang++-14",
            generator: "Unix Makefiles",
            archiver: "7z a",
            artifact: "ubuntu_clang.7z",
            boost: "OFF",
            coverage: "OFF"
          }
        # - {
        #     name: "windows-latest-gcc-boost-off",
        #     os: windows-latest,
        #     build_type: "Release",
        #     cc: "gcc",
        #     cxx: "g++",
        #     generator: "Ninja",
        #     archiver: "7z a",
        #     artifact: "windows_gcc.7z",
        #     boost: "OFF",
        #     coverage: "OFF"
        #   }
        # - {
        #     name: "windows-latest-clang-boost-off",
        #     os: windows-latest,
        #     build_type: "Release",
        #     cc: "clang",
        #     cxx: "clang++",
        #     generator: "Ninja",
        #     archiver: "7z a",
        #     artifact: "windows_clang.7z",
        #     boost: "OFF",
        #     coverage: "OFF"
        #   }
          
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Print Event
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install Dependencies Linux
        if: startsWith(matrix.config.name, 'ubuntu-latest')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          sudo apt-get install cmake
          sudo apt-get install gcc-11 g++-11
          sudo apt-get install clang-14
          sudo apt-get install lcov
          ninja    --version
          cmake    --version
          gcc      --version
          gcc-11   --version
          clang-14 --version
          lcov     --version

      - name: Install Dependencies Windows
        if: startsWith(matrix.config.name, 'windows-latest')
        run: |
          choco install ninja
          ninja    --version
          cmake    --version
          gcc      --version
          clang    --version
          
      - name: Configure
        shell: bash
        run: |
          rm -rf build
          mkdir build
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_INSTALL_PREFIX:PATH=install \
            -DIMPROC_WITH_BOOST=${{ matrix.config.boost }} \
            -DIMPROC_WITH_COVERAGE=${{ matrix.config.coverage }} \
            -DIMPROC_WITH_TESTS=ON \
            -G "${{ matrix.config.generator }}"
      
      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }} --target all

      - name: Test
        if: startsWith(matrix.config.coverage, 'OFF')
        shell: bash
        run: ./build/bin/improc_infrastructure_test

      - name: Install Strip
        shell: bash
        run: cmake --install build --strip

      - name: Pack
        shell: bash
        working-directory: install
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with: 
          name: ${{ matrix.config.name }}
          path: ./${{ matrix.config.artifact }}